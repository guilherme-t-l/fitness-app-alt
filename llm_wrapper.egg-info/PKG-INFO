Metadata-Version: 2.4
Name: llm-wrapper
Version: 1.0.0
Summary: A simple, scalable wrapper for Large Language Models
Home-page: https://github.com/yourusername/llm-wrapper
Author: Your Name
Author-email: your.email@example.com
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: anthropic>=0.40.0
Requires-Dist: openai>=1.0.0
Requires-Dist: flask>=2.0.0
Requires-Dist: flask-cors>=3.0.0
Requires-Dist: python-dotenv>=1.0.0
Requires-Dist: supabase>=2.0.0
Provides-Extra: web
Requires-Dist: flask>=2.0.0; extra == "web"
Requires-Dist: flask-cors>=3.0.0; extra == "web"
Provides-Extra: dev
Requires-Dist: pytest>=6.0; extra == "dev"
Requires-Dist: black>=21.0; extra == "dev"
Requires-Dist: flake8>=3.8; extra == "dev"
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: provides-extra
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# Nutritionist Co-Pilot App

An AI-powered assistant that helps nutritionists create and modify meal plans through natural conversation. The AI understands nutrition context and can suggest food substitutions while maintaining macro balance. Features a complete database-driven meal planning system with real-time macro calculations and dynamic food management.

## How It Works

1. **User chats** with an AI nutritionist in the left panel
2. **AI responds** with both chat messages and meal plan updates
3. **Meal plan panel** on the right updates automatically with real-time macro calculations
4. **Database-driven system** stores foods, meal plans, and nutritional data in Supabase
5. **Dynamic meal management** - add/remove meals and foods through intuitive UI
6. **AI can suggest** food substitutions, dietary adjustments, and macro modifications

## Project Structure

```
fitness-app-alt/
â”œâ”€â”€ web/                           # Main application
â”‚   â”œâ”€â”€ app.py                    # ðŸ”§ Flask server & API endpoints
â”‚   â”œâ”€â”€ database.py               # ðŸ”§ Supabase client configuration
â”‚   â”œâ”€â”€ database_service.py       # ðŸ”§ Database operations & error handling
â”‚   â”œâ”€â”€ models.py                 # ðŸ”§ Data models (Food, Meal, MealPlan)
â”‚   â”œâ”€â”€ seed_data.py              # ðŸ”§ Default food data & meal plans
â”‚   â”œâ”€â”€ setup_database.py         # ðŸ”§ Database initialization script
â”‚   â”œâ”€â”€ schema.sql                # ðŸ”§ Database schema definition
â”‚   â”œâ”€â”€ nutritionist_system_prompt.txt  # ðŸ”§ AI personality/instructions
â”‚   â”œâ”€â”€ static/js/                # ðŸ”§ Frontend JavaScript modules
â”‚   â”‚   â”œâ”€â”€ api.js                # ðŸ”§ API client for backend communication
â”‚   â”‚   â””â”€â”€ meal-plan.js          # ðŸ”§ Meal plan UI management
â”‚   â””â”€â”€ templates/
â”‚       â””â”€â”€ index.html            # ðŸ”§ Frontend UI (chat + meal plan panels)
â”œâ”€â”€ llm_wrapper/                   # AI provider abstraction
â”‚   â”œâ”€â”€ core.py                   # ðŸ”§ Main AI wrapper logic
â”‚   â”œâ”€â”€ config.py                 # ðŸ”§ Configuration management
â”‚   â””â”€â”€ providers/                # ðŸ”§ AI providers (OpenAI, Anthropic)
â”œâ”€â”€ requirements.txt              # Python dependencies
â”œâ”€â”€ deploy.sh                     # Deployment script
â””â”€â”€ .env                          # Environment variables (API keys, DB config)
```

## Key Files to Edit for Development

### **Frontend Changes**
- `web/templates/index.html` - UI layout, styling, chat interface
- `web/static/js/api.js` - API client for backend communication
- `web/static/js/meal-plan.js` - Meal plan UI management and interactions

### **Backend Changes**
- `web/app.py` - API endpoints, meal plan logic, chat handling
- `web/database_service.py` - Database operations, CRUD methods, error handling
- `web/models.py` - Data models and business logic
- `web/nutritionist_system_prompt.txt` - AI behavior and responses

### **Database Changes**
- `web/schema.sql` - Database table definitions and relationships
- `web/seed_data.py` - Default food data and initial meal plans
- `web/setup_database.py` - Database initialization and seeding

### **AI Provider Changes**
- `llm_wrapper/core.py` - Main AI wrapper functionality
- `llm_wrapper/providers/` - Add new AI providers or modify existing ones

## Quick Start

### **Option 1: Automated Setup (Recommended)**
```bash
./deploy.sh
```
This script will:
- Create virtual environment
- Install all dependencies
- Set up Supabase database
- Seed with default foods and meal plans
- Start the application

### **Option 2: Manual Setup**

1. **Install dependencies:**
   ```bash
   pip install -r requirements.txt
   ```

2. **Configure environment:**
   Create `.env` file with:
   ```bash
   ANTHROPIC_API_KEY=your_anthropic_api_key_here
   SUPABASE_URL=your_supabase_project_url_here
   SUPABASE_ANON_KEY=your_supabase_anon_key_here
   ```

3. **Set up database:**
   ```bash
   python web/setup_database.py
   ```

4. **Run the app:**
   ```bash
   python web/app.py
   ```

5. **Open browser:** `http://localhost:5000` (or `http://localhost:5001` if port 5000 is in use)

## Example Usage

### **Chat Interactions**
- **"Replace chicken with a vegetarian option"** â†’ AI suggests tofu/tempeh + updates meal plan
- **"Make this dairy-free"** â†’ AI identifies dairy items and suggests alternatives
- **"Increase protein for muscle building"** â†’ AI recommends protein-rich additions

### **Meal Plan Management**
- **Add meals** by clicking the "+ Add Meal" button
- **Add foods** to meals by clicking "+ Add Food" in each meal section
- **Edit quantities** by clicking on food items
- **Delete items** using the delete buttons
- **Real-time macros** update automatically as you modify the meal plan

### **Database Features**
- **Default foods** pre-loaded with nutritional data (per 100g)
- **Persistent storage** - meal plans saved in Supabase
- **Standardized units** - all quantities in grams for consistency
- **Error handling** - detailed feedback for any issues
